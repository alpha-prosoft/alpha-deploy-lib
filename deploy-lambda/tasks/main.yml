# ASCIIDOC_BEGIN
#
# This role is used to deploy a AWS Lambda function
#
# ASCIIDOC_END

- include_role:
    name: alpha-deploy-lib/resolve-params
  vars:
    stacks:
      - type: "CORE"
        name: "alpha-base"
      - type: "DYNAMODB"
        name: "alpha-dynamodb-svc"
      - type: "ELK"
        name: "alpha-index-svc"


- set_fact:
    params: '{{ params | combine({ "S3LambdaObjectName" : function_name + "-" + params["Version"],
                                   "MainClass" : lookup("env", "MAIN_CLASS")})}}'
- set_fact:
    params: '{{ params | combine({ "LambdaFunctionName" : function_name  })}}'

- set_fact:
    params: '{{ params | combine({ "CustomPolicy" : (custom_policy | to_json)  })}}'
  when: custom_policy is defined

- s3_bucket:
    name: '{{ params["DeploymentS3BucketName"] }}'
    region: "{{ params['Region'] }}"
    tags: '{{ resource_tags }}'
    encryption: "AES256"
    policy: |
      {
       "Id":"BucketPolicy",
       "Version":"2012-10-17",
       "Statement" : [
          {
             "Sid":"OnlyHTTPS",
             "Effect":"Deny",
             "Principal":"*",
             "Action":"s3:*",
             "Resource" : [
                "arn:aws:s3:::{{ params['DeploymentS3BucketName'] }}/*",
                "arn:aws:s3:::{{ params['DeploymentS3BucketName'] }}"
             ],
             "Condition":{
                "Bool":{
                   "aws:SecureTransport":"false"
                }
             }
          }
       ]
      }



- include_role:
    name: alpha-deploy-lib/cognito-idp-add-user
  vars:
    username: '{{ params["ServiceName"] }}'
    cognito_groups:
      - non-interactive

- set_fact:
    secret_json:

- name: 'Get client secret'
  shell: |
    aws cognito-idp describe-user-pool-client \
      --user-pool-id "{{ params['AuthUserPoolId'] }}" \
      --client-id "{{ params['AuthUserPoolClientId'] }}" \
      --query "UserPoolClient.ClientSecret" --output text
  register: client_secret

- block:
    - copy:
        dest: /dist/secret.json
        content: '{{ secrets | default({}) | combine(default_secrets) | to_nice_json  }}'
      environment: '{{ params }}'
  vars:
    default_secrets:
      db:
        name: "alpha-dynamodb-svc"
      svc:
        username: "{{ params['ServiceName'] }}@{{ params['PublicHostedZoneName'] }}"
        password: "{{ lookup('aws_secret',
                                '/' +
                                params['EnvironmentNameLower'] +
                                '/' +
                                params['ServiceName'] +
                                '@' +
                                params['PublicHostedZoneName'] +
                                '/password') }}"
      auth:
        client-id: "{{ params['AuthUserPoolClientId'] }}"
        client-secret: "{{ client_secret.stdout }}"
        user-pool-id: "{{ params['AuthUserPoolId'] }}"
        default-realm: "prod"
        mapping:
            id: "custom:user_id"
  when: no_secret is not defined

- copy:
    dest: /dist/secret.json
    content: '{{ {} | to_nice_json  }}'
  environment: '{{ params }}'
  when: no_secret is defined

- name: "Rename file if needed"
  args:
    executable: /bin/bash
  shell: |
    set -e
    if [[ -f '/dist/{{ params["ServiceName"] }}.jar' ]]; then
       cp /dist/{{ params["ServiceName"] }}.jar /dist/{{ params["ServiceName"] }}.zip
    fi

- name: "Add password to lambda jar"
  shell: 'zip -jrv /dist/{{ params["ServiceName"] }}.zip /dist/secret.json'

- name: 'Download jwks'
  args:
    executable: /bin/bash
  shell: |
    curl "https://cognito-idp.{{ params['Region'] }}.amazonaws.com/{{ params['AuthUserPoolId'] }}/.well-known/jwks.json" -o /dist/jwks.json
  environment: '{{ params }}'

- name: "Add cognito jwks to lambda"
  shell: 'zip -jrv /dist/{{ params["ServiceName"] }}.zip /dist/jwks.json'


- name: 'Check if layer exists' 
  args: 
     executable: /bin/bash 
  shell: | 
     if [[ -f '/dist/{{ params["ServiceName"] }}-layer.zip' ]]; then 
       echo "true" 
     else 
       echo "false" 
     fi 
  register: layer_out 
 
- set_fact: 
    params: '{{ params | combine( { "S3LayerBucketName": params["AccountId"] + "-" + params["EnvironmentNameLower"] + "-deployment", 
                                            "S3LayerObjectName": function_name + "-layer-" + params["Version"] + ".zip" } ) }}' 
  when: layer_out.stdout == 'true' 
 
 
- name: "Upload layer if exists" 
  aws_s3: 
    bucket: '{{ params["DeploymentS3BucketName"] }}' 
    region: '{{ params["Region"] }}' 
    mode: put 
    src: '/dist/{{ function_name }}-layer.zip' 
    object: '{{ params["S3LayerObjectName"] }}' 
  environment: '{{ params }}' 
  when: layer_out.stdout == 'true' 


- name: 'Upload lambda package to S3'
  aws_s3:
    bucket: '{{ params["DeploymentS3BucketName"] }}'
    region: '{{ params["Region"] }}'
    mode: put
    src: '/dist/{{ params["ServiceName"] }}.zip'
    object: '{{ params["S3LambdaObjectName"] }}'
  environment: '{{ params }}'

- name: 'Set lambda CF stack name fact'
  set_fact:
    lambda_stack_name: '{{ params["EnvironmentNameUpper"] }}-LAMBDA-{{ function_name }}-stack'

- name: 'Create files dir if missing'
  file:
    path: '{{ role_path }}/files'
    state: directory

- name: "Render template from CF"
  template:
    src: 'cf-lambda-deploy.yaml'
    dest: '{{ role_path }}/files/cf-lambda-deploy.yaml'
  when: lambda_stack_file is not defined

- name: 'Set lambda CF stack name fact'
  set_fact:
    lambda_stack_file: '{{ role_path }}/files/cf-lambda-deploy.yaml'
  when: lambda_stack_file is not defined

- name: 'Deploy lambda stack'
  include_role:
    name: alpha-deploy-lib/deploy-cloudformation
  vars:
    cloud_formation: '{{ lambda_stack_file }}'
    stack_name: '{{ lambda_stack_name }}'
    local_params: '{{ settings | default({}) | combine({"CustomConfig" : (custom_config | default({}) | to_json)}) }}'
    type: 'LAMBDA'

- set_fact:
    params: '{{ params | combine({ parameter_name : cloud_formation_output["stack_outputs"]["LambdaFunction"] }) }}'

- set_fact:
    params: '{{ params | combine({ parameter_name + "Role" : cloud_formation_output["stack_outputs"]["LambdaRoleName"] }) }}'

- set_fact:
    params: '{{ params | combine( cloud_formation_output["stack_outputs"] ) }}'
