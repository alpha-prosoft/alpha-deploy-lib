AWSTemplateFormatVersion: "2010-09-09"
Description: "CF Template for Lambda function deployment"
Parameters:
  BuildId:
    Type: String

  EnvironmentNameLower:
    Type: String

  EnvironmentNameUpper:
    Type: String

  DeploymentS3BucketName:
    Type: String

  LambdaMemorySize:
    Type: Number
    Default: 128

  LambdaTimeout:
    Type: Number
    Default: 110

  ReservedConcurrentExecutions:
    Type: Number
    Default: 25

  LambdaFunctionHandler:
    Type: String
    Default: 'index.handler'

  LambdaRuntime: 
    Type: String
    Default: "provided.al2"

  LambdaFunctionName:
    Type: String

  MainClass:
    Type: String

  Region:
    Type: String

  VPCId:
    Type: String

  ServiceName:
    Type: String

  PublicHostedZoneName:
    Type: String

  PublicHostedZoneId:
    Type: String

  S3LambdaObjectName:
    Type: String

  CertificateArn:
    Type: String


  SubscribeDb:
    Type: String
    Default: "True"

  EnableImport:
    Type: String
    Default: "False"

  QueueTimeout:
    Type: String
    Default: "310"

  AuthUserPoolId:
    Type: String

  AuthUserPoolClientId:
    Type: String

  PrivateSubnet1A:
    Type: String
  PrivateSubnet2A:
    Type: String

  LambdaSecurityGroup:
    Type: String

  CustomConfig:
    Type: String

  Deployment:
    Type: String
    Default: "PUBLIC"

  CustomPolicy:
    Type: String
    Default: ""

  LambdaSnapStart:
    Type: String
    Default: "False"
    Description: "Enable SnapStart for the Lambda function. Valid for Java runtimes."
    AllowedValues:
      - "True"
      - "False"
      - "true"
      - "false"

  LambdaProvisionedConcurrency:
    Type: Number
    Description: "Amount of provisioned concurrency to allocate for the function. Set to 0 to disable. Often used with SnapStart."
    Default: 0

Conditions:
  ShouldSubscribe: !Or [ !Equals [ !Ref SubscribeDb, "True" ], !Equals [ !Ref SubscribeDb, "true" ] ]
  IsEnableImport: !Or [ !Equals [ !Ref EnableImport, "True" ], !Equals [ !Ref EnableImport, "true" ] ]
  IsInVpc: !Equals [ !Ref Deployment, "VPC" ]
  HasCustmPolicy: !Not [ !Equals [ !Ref CustomPolicy, "" ] ]
  IsSnapStartEnabled: !Or [ !Equals [ !Ref LambdaSnapStart, "True" ], !Equals [ !Ref LambdaSnapStart, "true" ] ]
  IsProvisionedConcurrencyEnabled: !Not [!Equals [!Ref LambdaProvisionedConcurrency, 0]]

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      RoleName: !Sub "${EnvironmentNameUpper}-${LambdaFunctionName}-Role"

  LambdaPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub "${EnvironmentNameUpper}-${LambdaFunctionName}-Policy"
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: BasicPolicy
            Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - ec2:DescribeClientVpnTargetNetworks
              - ec2:DescribeClientVpnEndpoints
              - ec2:ApplySecurityGroupsToClientVpnTargetNetwork
              - ec2:DescribeClientVpnConnections
              - ec2:TerminateClientVpnConnections
              - s3:PutObject
              - s3:GetObject
              - s3:*
              - cognito-idp:AdminInitiateAuth
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
            Resource: !Sub "arn:aws:sqs:${Region}:${AWS::AccountId}:${EnvironmentNameLower}*"
          - Effect: Allow
            Action:
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
              - sqs:GetQueueAttributes
              - sqs:ChangeMessageVisibility
            Resource: !Sub "arn:aws:sqs:${Region}:${AWS::AccountId}:${EnvironmentNameLower}*"
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:PutItem
              - dynamodb:GetItem
              - dynamodb:BatchWriteItem
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  CustomLambdaPolicy:
    Type: "AWS::IAM::Policy"
    Condition: HasCustmPolicy
    Properties:
      PolicyName: !Sub "${EnvironmentNameUpper}-${LambdaFunctionName}-CustomPolicy"
      PolicyDocument: !Ref CustomPolicy
      Roles:
        - !Ref LambdaRole


  LambdaFunction:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaPolicy
    Properties:
      FunctionName: !Sub "${EnvironmentNameUpper}-${LambdaFunctionName}"
      Handler: !Sub "${LambdaFunctionHandler}"
      Role: !GetAtt LambdaRole.Arn
      Runtime: !Ref LambdaRuntime
      MemorySize: !Sub "${LambdaMemorySize}"
      Timeout: !Sub "${LambdaTimeout}"
      ReservedConcurrentExecutions: !Ref ReservedConcurrentExecutions
      ProvisionedConcurrencyConfig: !If
        - IsProvisionedConcurrencyEnabled
        - ProvisionedConcurrentExecutions: !Ref LambdaProvisionedConcurrency
        - !Ref AWS::NoValue
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Sub "${DeploymentS3BucketName}"
        S3Key: !Sub "${S3LambdaObjectName}"
      SnapStart: !If
        - IsSnapStartEnabled
        - ApplyOn: PublishedVersions
        - !Ref AWS::NoValue
      VpcConfig: !If
        - IsInVpc
        - SecurityGroupIds:
            - !Ref LambdaSecurityGroup
          SubnetIds:
            - !Ref PrivateSubnet1A
            - !Ref PrivateSubnet2A
        - !Ref AWS::NoValue
      Environment:
        Variables:
          EnvironmentNameUpper: !Ref EnvironmentNameUpper
          EnvironmentNameLower: !Ref EnvironmentNameLower
          PublicHostedZoneName: !Ref PublicHostedZoneName
          PrivateHostedZoneName: !Ref PublicHostedZoneName
          AuthUserPoolId: !Ref AuthUserPoolId
          AuthUserPoolClientId: !Ref AuthUserPoolClientId
          ServiceName: !Ref ServiceName
          Region: !Ref Region
          BuildId: !Ref BuildId
          AccountId: !Sub "${AWS::AccountId}"
          CustomConfig: !Ref CustomConfig
          MainClass: !Ref MainClass

  LambdaInvokeAPIGWPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: !GetAtt LambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
    DependsOn:
      - LambdaFunction

  TestCommandsQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentNameLower}-test-${ServiceName}-commands-1.fifo"
      FifoQueue: true
      DelaySeconds: 0
      VisibilityTimeout: !Ref QueueTimeout

  ProdCommandsQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentNameLower}-prod-${ServiceName}-commands-1.fifo"
      FifoQueue: true
      DelaySeconds: 0
      VisibilityTimeout: !Ref QueueTimeout

  TestEventsQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentNameLower}-test-${ServiceName}-events-1.fifo"
      FifoQueue: true
      DelaySeconds: 0
      VisibilityTimeout: !Ref QueueTimeout

  ProdEventsQueue1:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${EnvironmentNameLower}-prod-${ServiceName}-events-1.fifo"
      FifoQueue: true
      DelaySeconds: 0
      VisibilityTimeout: !Ref QueueTimeout



  TestCommandsQueue1LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt TestCommandsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  ProdCommandsQueue1LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt ProdCommandsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  TestEventsQueue1LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt TestEventsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  ProdEventsQueue1LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt ProdEventsQueue1.Arn
      FunctionName: !Ref LambdaFunction


  QueueSendPermissions:
    Type: AWS::SQS::QueuePolicy
    Condition: ShouldSubscribe
    DependsOn:
      - LambdaPolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Resource: "*"
          - Sid: "OnlyHTTPS"
            Action: sqs:*
            Effect: Deny
            Principal: "*"
            Resource: "*"
            Condition:
              Bool:
                aws:SecureTransport: false
      Queues:
        - !Ref TestCommandsQueue1
        - !Ref ProdCommandsQueue1
        - !Ref TestEventsQueue1
        - !Ref ProdEventsQueue1

  TestCommandsSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt TestCommandsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  ProdCommandsSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt ProdCommandsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  TestEventsSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt TestEventsQueue1.Arn
      FunctionName: !Ref LambdaFunction

  ProdEventsSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt ProdEventsQueue1.Arn
      FunctionName: !Ref LambdaFunction



  BucketLambdaPermissions:
    Type: AWS::Lambda::Permission
    Condition: IsEnableImport
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${AWS::AccountId}-${EnvironmentNameLower}-${ServiceName}-import'
      SourceAccount: !Ref AWS::AccountId

  LambdaBucketPolicy:
    Type: AWS::IAM::Policy
    Condition: IsEnableImport
    Properties:
      PolicyName: LambdaBuckerImportPolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource: !GetAtt Bucket.Arn
      Roles:
        - !Ref LambdaRole

  Bucket:
    Type: AWS::S3::Bucket
    Condition: IsEnableImport
    DependsOn:
      - S3QueuePermissions
    Properties:
      BucketName: !Sub '${AWS::AccountId}-${EnvironmentNameLower}-${ServiceName}'
      NotificationConfiguration:
        QueueConfigurations:
          - Event: s3:ObjectCreated:*
            Queue: !GetAtt S3Queue.Arn
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  BucketPolicyData:
    Type: AWS::S3::BucketPolicy
    Condition: IsEnableImport
    Properties:
      PolicyDocument:
        Id: BucketPolicy
        Version: 2012-10-17
        Statement:
          - Sid: "OnlyHTTPS"
            Action: s3:*
            Effect: Deny
            Principal: "*"
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}/*"
              - !Sub "arn:aws:s3:::${Bucket}"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: ReadWrite
            Effect: Allow
            Principal: "*"
            Action:
              - s3:*
            Resource:
              - !Sub "arn:aws:s3:::${Bucket}/*"
              - !Sub "arn:aws:s3:::${Bucket}"
            Condition:
              StringLike:
                "aws:PrincipalArn": !Sub "arn:aws:iam::${AWS::AccountId}:role/${EnvironmentNameUpper}-${ServiceName}-*"
      Bucket: !Ref Bucket

  S3Queue:
    Type: AWS::SQS::Queue
    Condition: IsEnableImport
    Properties:
      QueueName: !Sub "${EnvironmentNameLower}-${ServiceName}-s3"
      DelaySeconds: 0
      VisibilityTimeout: 120

  S3QueueLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: IsEnableImport
    Properties:
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt S3Queue.Arn
      FunctionName: !Ref LambdaFunction

  S3QueueSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Condition: IsEnableImport
    Properties:
      Enabled: true
      BatchSize: 1
      EventSourceArn: !GetAtt S3Queue.Arn
      FunctionName: !Ref LambdaFunction

  S3QueuePermissions:
    Type: AWS::SQS::QueuePolicy
    Condition: IsEnableImport
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: sqs:SendMessage
            Principal: "*"
            Resource: !GetAtt S3Queue.Arn
            Condition:
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:s3:::${AWS::AccountId}-${EnvironmentNameLower}-${ServiceName}'

      Queues:
        - !Ref S3Queue


Outputs:
  LambdaFunction:
    Description: Arn of the lambda function
    Value: !GetAtt LambdaFunction.Arn
  LambdaRoleArn:
    Description: Arn of the lambda function
    Value: !GetAtt LambdaRole.Arn
  LambdaRoleName:
    Value: !Ref LambdaRole
