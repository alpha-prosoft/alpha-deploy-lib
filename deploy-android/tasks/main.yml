- shell: |
    rm -rf /dist/${EnvironmentNameLower}
    mkdir -p /dist/${EnvironmentNameLower}/s3
    cp -r /dist/s3/* /dist/${EnvironmentNameLower}/s3/
    cp /dist/${EnvironmentNameLower}/s3/index.html /dist/${EnvironmentNameLower}/s3/index.j2.html
  environment: '{{ params }}'

- name: 'Render index.html template'
  template:
    src: '/dist/{{ params["EnvironmentNameLower"] }}/s3/index.j2.html'
    dest: '/dist/{{ params["EnvironmentNameLower"] }}/s3/index.html'

- name: 'Create signing key'
  shell: |
    set -e
    key_name="/${EnvironmentNameLower}/android/{{ params["ServiceName"] }}/key-rsa"
    key=$(aws secretsmanager get-secret-value --secret-id "${key_name}" || echo '')
    if [ -z "${key}" ]; then
     keytool -genkey -v \
                -keystore temp.keystore \
                -alias appreleasedemoalias \
                -validity 10000 \
                -keysize 2048 \
                -keyalg RSA \
                -dname "cn=Alpha-Prosoft, o=alpha-prosoft" \
                -storepass abcdef12 \
                -keypass abcdef12
      key_material=$(cat temp.keystore | base64 -w0)

      aws secretsmanager create-secret --name "${key_name}"
      aws secretsmanager put-secret-value --secret-id "${key_name}" --secret-string "${key_material}"
      rm temp.keystore
    fi
    aws secretsmanager get-secret-value \
        --secret-id "${key_name}" \
        --query 'SecretString' \
        --output text | base64 -d > /home/build/release.keystore
  environment: '{{ params }}'

- name: 'Build android app'
  shell: |
    set -e
    cd /home/build
    rm -rf /home/build/www
    mkdir -p /home/build/www
    cp -r /dist/${EnvironmentNameLower}/s3/* /home/build/www

    mv config.xml config-orig.xml
    sed 's/<name>\(.*\)<\/name>/<name>{% if not params["EnvironmentNameUpper"].startswith("PROD") %}{{ params["EnvironmentNameUpper"] }} {% endif %}\1<\/name>/g' config-orig.xml > config.xml
    sed -i 's/^\(.*\)applicationId.*$/\1applicationId = privateHelpers.extractStringFromManifest("package") + "." + "$System.env.EnvironmentNameLower"/g' \
          platforms/android/app/build.gradle 

    sed -i 's/1.0.0/1.0.{{ params["BuildId"] }}/g' config.xml 
    cat config.xml
    cat platforms/android/app/build.gradle

    cordova build --release android -- \
           --gradleArg=--info \
           --gradleArg=--stacktrace \
           --keystore=/home/build/release.keystore \
           --storePassword=abcdef12 \
           --alias=appreleasedemoalias \
           --password=abcdef12

    tree /home/build/platforms/android/app/build/outputs

    cp platforms/android/app/build/outputs/bundle/release/app-release.aab \
       /dist/release.aab
  environment: '{{ params }}'

- name: 'Deploy app'
  environment: '{{ pipeline_params }}'
  shell: |
    set -e
    ls -la /dist
    key_name="/pipeline/jenkins/app-center/api-key"
    APP_CENTER_TOKEN="$(aws secretsmanager get-secret-value --secret-id ${key_name} --output text --query 'SecretString')"
    export APP_CENTER_TOKEN=${APP_CENTER_TOKEN}

    org="Alpha-Prosoft"
    app_name="{{ params["ServiceName"] }}-{{ params["EnvironmentNameLower"] }}"

    app=$(appcenter apps show \
                 --app "${org}/${app_name}" \
                 --token "${APP_CENTER_TOKEN}" > /dev/null || echo "Missing")

    echo "App: ${app}"
    if [ "${app}" = "Missing" ]; then
      appcenter orgs apps create \
                --org-name "${org}" \
                --display-name "${app_name}" \
                --release-type "Beta" \
                --os Android \
                --platform Cordova \
                --token "${APP_CENTER_TOKEN}" \
                --disable-telemetry
    fi

    echo "Group: ${group}"
    group=$(appcenter  distribute groups show \
                       --group DEV \
                       --token b817fc3fb8bb16ef5670ecc16fe548ce54dbb6ca \
                       --app "${org}/${app_name}" > /dev/null || echo "Missing")

    if [ "${group}" = "Missing" ]; then
       appcenter  distribute groups create --name DEV \
                 --token "${APP_CENTER_TOKEN}" \
                 --testers "" \
                 --app  "${org}/${app_name}" || echo "Already exists"
    fi

    collaborators="$(appcenter orgs collaborators list \
                                      --name ${org} \
                                      --token ${APP_CENTER_TOKEN} \
                                      --output json | jq -r '[.[][2]]|join(" ")')"
    appcenter  distribute groups update  \
               --add-testers "" \
               --app "${org}/${app_name}" \
               --group "DEV" \
               --token "${APP_CENTER_TOKEN}" \
               --debug

    appcenter  distribute groups update  \
           --add-testers  "${collaborators}" \
           --app "${org}/${app_name}" \
           --group "DEV" \
           --token "${APP_CENTER_TOKEN}" \
           --debug

    appcenter distribute release \
            --group DEV \
            --file /dist/release.aab \
            --app "${org}/${app_name}" \
            --token "${APP_CENTER_TOKEN}" \
            --debug


