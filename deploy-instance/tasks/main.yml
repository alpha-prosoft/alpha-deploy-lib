- set_fact:
    instance_yml: '{{ role_path }}/files/instance.yml'

- name: 'Add permissions for AMI'
  shell: |
    owner_id="$(aws ec2 describe-images --image-ids "{{ params['AmiId'] }}" --query 'Images[*].OwnerId' --output text)"

    echo "Owner: $owner_id"
    echo "New owner: {{ params['AccountId'] }}"
      
    if [[ "${owner_id}" != "{{ params['AccountId'] }}" ]]; then
      aws ec2 modify-image-attribute \
        --image-id "{{ params['AmiId'] }}" \
        --launch-permission "Add=[{UserId={{ params['AccountId'] }}}]"
    fi
  environment: '{{ pipeline_params  }}' 

- include_role:
    name: alpha-deploy-lib/resolve-params
  vars:
    stacks: 
    - type: 'BASE'
      name: '{{ params["ProjectName"] }}-base'

- name: 'Create key pair'
  environment: '{{ params }}' 
  shell: |
    set -e
    key_name="/${EnvironmentNameLower}/{{ settings["ServiceAlias"] }}/id_rsa"
    key=$(aws secretsmanager get-secret-value --secret-id "${key_name}" || echo '')
    if [ -z "${key}" ]; then
      key_material=$(aws ec2 create-key-pair --key-name "${key_name}" | jq -r '.KeyMaterial')

      aws secretsmanager create-secret --name "${key_name}" || echo 'Already exists'
      aws secretsmanager put-secret-value --secret-id "${key_name}" --secret-string "${key_material}"
    fi

- include_role:
    name: alpha-deploy-lib/cognito-idp-add-user
  vars:
    username: '{{ settings["ServiceAlias"] }}'
    cognito_groups:
    - non-interactive

- name: 'Get config from Parameter Store'
  shell: |
     config="$(aws ssm get-parameter \
                --name '/install/config' \
                --query 'Parameter.Value' \
                --output text || echo "{}")"     
     echo "Current config"
     if [[ "$(echo $config | jq -r '.builder.deployer // empty')" == "False" ]]; then 
       config="{}"
     fi
     echo $config | jq -c .
  register: config_parameter
  ignore_errors: true 

- name: "Fetch deployed config" 
  set_fact: 
    AssociatePublicIpAddress: "{{ config_parameter["associatePublicIpAddress"] }}"
    ManagedPolicyArns:   "{{ config_parameter["ManagedPolicyArns"] | default([]) 
                                                             +  ["arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                                                                 "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"]  }}"
- debug: 
    var: ManagedPolicyArns

- debug: 
    var: AssociatePublicIpAddress
                                                            
- name: "Update params with deployer config" 
  set_fact:
    params: '{{ params | combine({ "AssociatePublicIpAddress" : AssociatePublicIpAddress ,
                                   "ManagedPolicyArns" : ManagedPolicyArns }) }}'

- include_role:
    name: alpha-deploy-lib/deploy-cloudformation
  vars:
    cloud_formation: '{{ instance_yml }}'
    type: 'INSTANCE'

- set_fact:
    params: '{{ params | combine( cloud_formation_output["stack_outputs"] ) }}'
