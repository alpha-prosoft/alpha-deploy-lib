AWSTemplateFormatVersion: 2010-09-09
Description: Daemon cluster node
Parameters:
  VolumePath:
    Type: String
    Description: 'Path to persistance storage where volume will be mounted'
  ServiceName:
    Type: String
  AmiId:
    Type: String
  NodeInstanceType:
    Type: String
    Default: 't3.small'
    Description: 'Type of the instances used'
  VolumeType:
    Type: String
    Default: 'gp2'
  VolumeSize:
    Type: String
    Default: '100'

  EnvironmentNameUpper:
    Type: String
  EnvironmentNameLower:
    Type: String
  VPCId:
    Type: String
  VPCCidr:
    Type: String



  PrivateSubnet1A:
    Type: String
  PrivateSubnet2A:
    Type: String
  CertificateArn:
    Type: String

  LoadBalancerListenerArn:
    Type: String
  LoadBalancerDNSName:
    Type: String
  LoadBalancerCanonicalHostedZoneID:
    Type: String

  PrivateHostedZoneId:
    Type: String
  PrivateHostedZoneName:
    Type: String

  PublicHostedZoneId:
    Type: String
  PublicHostedZoneName:
    Type: String


  Region:
    Type: String
  AccountId:
    Type: String
  VerifyApiUrl:
    Type: String
    Default: ""
  Priority:
    Type: String
  LogDirs:
    Type: String
    Default: "/var/log"
  TargetPort:
    Type: String
    Default: "8080"
  HealthCheckPath:
    Type: String
    Default: "/ping"

  AuthUserPoolId:
    Type: String
  AuthUserPoolDomain:
    Type: String
  ServiceAlias:
    Type: String

  CustomPolicy:
    Type: String
    Default: ""

  ManagedPolicyArns:
    Type: CommaDelimitedList

  AssociatePublicIpAddress: 
    Type: String

  LoadBalancerScheme:
    Type: String
    
Conditions:
  HasCustomPolicy: !Not [ !Equals [ !Ref CustomPolicy, "" ]]
  IsPrivate: !Equals [ !Ref LoadBalancerScheme, "internal" ]

Resources:
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns: !Ref ManagedPolicyArns
      RoleName: !Sub ${EnvironmentNameLower}-${ServiceName}-Role

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCId
      GroupDescription: Additional access to the Service
      SecurityGroupIngress:
        - CidrIp: !Ref VPCCidr 
          IpProtocol: tcp
          FromPort: 22
          ToPort: 30000
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentNameUpper}-InstanceSecurityGroup

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
      InstanceProfileName: !Sub ${EnvironmentNameUpper}-${ServiceName}-DaemonServiceNodesInstanceProfile

  DataVolume:
    Type: AWS::EC2::Volume
    DeletionPolicy: Snapshot
    Properties:
      AvailabilityZone: !Sub "${AWS::Region}a"
      Size: !Ref VolumeSize
      VolumeType: !Ref VolumeType
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentNameUpper}-${ServiceName}-volume

  InstancePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${EnvironmentNameUpper}-${ServiceName}-Volume-Policy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ecs:DeregisterContainerInstance"
              - "ecs:DiscoverPollEndpoint"
              - "ecs:Poll"
              - "ec2:DescribeInstances"
              - "ec2:ReportInstanceStatus"
              - "ec2:DescribeVolumes"
              - "ecs:RegisterContainerInstance"
              - "ecs:RegisterContainerInstance"
              - "ecs:StartTelemetrySession"
              - "ecs:Submit*"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "ecr:GetAuthorizationToken"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
            Resource: "*"
          - Effect: Allow
            Action:
              - secretsmanager:DescribeSecret
              - secretsmanager:List*
            Resource: "*"
          - Effect: Allow
            Action:
              - secretsmanager:GetSecretValue
              - secretsmanager:DescribeSecret
              - secretsmanager:List*
            Resource:
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentNameLower}/${ServiceName}/*"
              - !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentNameLower}/${ServiceAlias}/*"
          - Effect: "Allow"
            Action:
              - "*"
            Resource:
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${DataVolume}"
          - Effect: Allow
            Action:
              - route53:*
            Resource:
              - !Sub "arn:aws:route53:::hostedzone/${PrivateHostedZoneId}"
              - !Sub "arn:aws:route53:::hostedzone/${PublicHostedZoneId}"
          - Effect: "Allow"
            Action:
              - "ec2:AttachVolume"
              - "ec2:DetachVolume"
            Resource:
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/${DataVolume}"
              - !Sub "arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*"
          - Effect: "Allow"
            Action:
              - "ssm:DescribeParameters"
              - "ssm:PutParameter"
              - "ssm:DeleteParameter"
              - "ssm:GetParameterHistory"
              - "ssm:GetParametersByPath"
              - "ssm:GetParameters"
              - "ssm:GetParameter"
              - "ssm:DeleteParameters"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/keys/private/${ServiceName}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/keys/private/${ServiceAlias}/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/keys/public/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/keys/public/*"
          - Effect: "Allow"
            Action:
              - "ssm:DescribeParameters"
              - "ssm:GetParametersByPath"
              - "ssm:GetParameters"
              - "ssm:GetParameter"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/public/*"
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameLower}/public/*"
          - Effect: "Allow"
            Action:
              - "ssm:GetParameters"
              - "ssm:DescribeParameters"
              - "ssm:GetParametersByPath"
            Resource:
              - !Sub "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${EnvironmentNameUpper}/public/*"
          - Effect: "Allow"
            Action:
              - "cloudformation:SignalResource"
            Resource:
              - "*"
          - Effect: Allow
            Action: ec2:TerminateInstances
            Resource: !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
            Condition:
              StringEquals:
                'ec2:ResourceTag/ServiceName': !Ref ServiceName

                
      Roles:
        - !Ref InstanceRole

  CustomInstancePolicy:
    Type: AWS::IAM::Policy
    Condition: HasCustomPolicy
    Properties:
      PolicyName: !Sub ${EnvironmentNameUpper}-${ServiceName}-Custom-Policy
      PolicyDocument: !Ref CustomPolicy
      Roles:
        - !Ref InstanceRole

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: "200-499"
      Port: !Ref TargetPort
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref VPCId
      TargetType: instance
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentNameUpper}-${ServiceName}-TG

  ServiceAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn: InstancePolicy
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1A
      LaunchConfigurationName: !Ref ServiceLaunchConfiguration
      TargetGroupARNs:
        - !Ref TargetGroup
      MinSize: 1
      MaxSize: 1
      DesiredCapacity: 1
      HealthCheckGracePeriod: 360
      HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentNameUpper}-${ServiceName}
          PropagateAtLaunch: True
        - Key: DaemonMode
          Value: 'True'
          PropagateAtLaunch: True
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT10M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        WaitOnResourceSignals: true
        PauseTime: PT12M
      AutoScalingReplacingUpdate:
        WillReplace: false

  AuthUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      AllowedOAuthFlows:
        - implicit
        - code
      ExplicitAuthFlows:
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      CallbackURLs:
        - !If
          - IsPrivate 
          - !Sub "https://${ServiceAlias}.${PrivateHostedZoneName}/oauth2/idpresponse"
          - !Sub "https://${ServiceAlias}.${PublicHostedZoneName}/oauth2/idpresponse"
      ClientName: !Sub "${EnvironmentNameLower}-${ServiceName}-client"
      DefaultRedirectURI: !If 
      - IsPrivate 
      - !Sub  "https://${ServiceAlias}.${PrivateHostedZoneName}/oauth2/idpresponse"
      - !Sub  "https://${ServiceAlias}.${PublicHostedZoneName}/oauth2/idpresponse"
      GenerateSecret: True
      SupportedIdentityProviders:
        - COGNITO
      UserPoolId: !Ref AuthUserPoolId
      
  InstanceListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: authenticate-cognito
          Order: 1
          AuthenticateCognitoConfig:
            UserPoolArn:  !Sub "arn:aws:cognito-idp:${AWS::Region}:${AWS::AccountId}:userpool/${AuthUserPoolId}"
            UserPoolClientId: !Ref AuthUserPoolClient
            UserPoolDomain:  !Ref AuthUserPoolDomain
        - Type: forward
          Order: 2
          TargetGroupArn: !Ref TargetGroup
      Conditions:
        - Field: host-header
          Values:
            - !If 
              - IsPrivate 
              - !Sub "${ServiceAlias}.${PrivateHostedZoneName}"
              - !Sub "${ServiceAlias}.${PublicHostedZoneName}"
      ListenerArn: !Ref LoadBalancerListenerArn
      Priority: !Ref Priority

  ServiceDNSRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      HostedZoneId: !If 
      - IsPrivate 
      - !Sub '${PrivateHostedZoneId}'
      - !Sub '${PublicHostedZoneId}'
      Comment: "DNS name for Application Load Balancer"
      Name: !If 
      - IsPrivate
      - !Sub '${ServiceAlias}.${PrivateHostedZoneName}.'
      - !Sub '${ServiceAlias}.${PublicHostedZoneName}.'
      Type: A
      AliasTarget:
        HostedZoneId: !Ref LoadBalancerCanonicalHostedZoneID
        DNSName: !Ref LoadBalancerDNSName

  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref ServiceName
      RetentionInDays: 30

  ServiceLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: InstanceProfile
    Properties:
      AssociatePublicIpAddress: !Ref AssociatePublicIpAddress
      ImageId: !Ref AmiId
      InstanceType: !Ref NodeInstanceType
      MetadataOptions: 
          HttpEndpoint: enabled
          HttpPutResponseHopLimit: 3
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Sub "/${EnvironmentNameLower}/${ServiceAlias}/id_rsa"
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash
          # Sets the ec2-ssh access groups and imports users
          set -ex

          username=$(grep ":2025:" /etc/passwd | cut -f 1 -d ":")
          echo "Setting up fo user $username"
          export username=$username
          export Username=$username


          export AWS_DEFAULT_REGION="${AWS::Region}"
          export EnvironmentNameUpper="${EnvironmentNameUpper}"
          export EnvironmentNameLower="${EnvironmentNameLower}"
          export EnvironmentNameLower="${EnvironmentNameLower}"
          export EnvironmentNameUpper="${EnvironmentNameUpper}"
          export EnvironmentNameUpper="${EnvironmentNameUpper}"
          export EnvironmentNameLower="${EnvironmentNameLower}"
          export ServiceName="${ServiceName}"
          export ServiceAlias="${ServiceAlias}"
          export InstanceProfileArn="${InstanceProfile.Arn}"
          export PrivateSubnet1A="${PrivateSubnet1A}"
          export PrivateSubnet2A="${PrivateSubnet2A}"
          export InstanceSecurityGroupId="${InstanceSecurityGroup}"

          export VPCId="${VPCId}"
          export PrivateHostedZoneName="${PrivateHostedZoneName}"
          export PublicHostedZoneName="${PublicHostedZoneName}"
          export LoadBalancerScheme="${LoadBalancerScheme}"
          export Region="${AWS::Region}"
          export AccountId="${AccountId}"
          export VerifyApiUrl="${VerifyApiUrl}"
          export AuthUserPoolDomain="${AuthUserPoolDomain}"
          export AmiId="${AmiId}"
          

          echo "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin" >> /etc/environment
          echo "Username=$username" >> /etc/environment
          echo "EnvironmentNameUpper=${EnvironmentNameUpper}" >> /etc/environment
          echo "EnvironmentNameLower=${EnvironmentNameLower}" >> /etc/environment
          echo "EnvironmentNameLower=${EnvironmentNameLower}" >> /etc/environment
          echo "EnvironmentNameUpper=${EnvironmentNameUpper}" >> /etc/environment
          echo "EnvironmentNameUpper=${EnvironmentNameUpper}" >> /etc/environment
          echo "EnvironmentNameLower=${EnvironmentNameLower}" >> /etc/environment
          echo "ServiceName=${ServiceName}" >> /etc/environment
          echo "ServiceAlias=${ServiceAlias}" >> /etc/environment
          echo "VPCId=${VPCId}" >> /etc/environment
          echo "PrivateHostedZoneName=${PrivateHostedZoneName}" >> /etc/environment
          echo "PublicHostedZoneName=${PublicHostedZoneName}" >> /etc/environment
          echo "LoadBalancerScheme=${LoadBalancerScheme}" >> /etc/environment
          echo "Region=${AWS::Region}" >> /etc/environment
          echo "AccountId=${AccountId}" >> /etc/environment
          echo "VerifyApiUrl=${VerifyApiUrl}" >> /etc/environment
          echo "AuthUserPoolDomain=${AuthUserPoolDomain}" >> /etc/environment
          echo "InstanceProfileArn=${InstanceProfile.Arn}" >> /etc/environment
          echo "PrivateSubnet1A=${PrivateSubnet1A}" >> /etc/environment
          echo "PrivateSubnet2A=${PrivateSubnet2A}" >> /etc/environment
          echo "InstanceSecurityGroupId=${InstanceSecurityGroup}" >> /etc/environment
          echo "AmiId=${AmiId}" >> /etc/environment

          echo "############ fetct SSH keys #############"
          mkdir -p /home/$username/.ssh
          chown $username:$username /home/$username/.ssh

          key_name="/${EnvironmentNameLower}/keys/private/${ServiceAlias}/private-key"
          aws ssm get-parameter \
              --name "$key_name" \
              --with-decryption \
              --query "Parameter.Value" \
              --output text > /home/$username/.ssh/id_rsa
                        
          chown $username:$username "/home/$username/.ssh" -R 
          chmod 700 "/home/$username/.ssh" -R 

          ssh-keygen -y -f "/home/$username/.ssh/id_rsa" > "/home/$username/.ssh/id_rsa.pub"  
          
          mkdir -p /run/$username
          chown $username:$username /run/$username
          echo SSH_AUTH_SOCK=/run/$username/ssh-agent.socket >> /etc/environment
          export SSH_AUTH_SOCK=/run/$username/ssh-agent.socket
          su $username -c "/usr/bin/ssh-agent -a $SSH_AUTH_SOCK"
          su $username -c "/usr/bin/ssh-add /home/$username/.ssh/id_rsa"

          echo "######### Traefik ######################" 
          if [[ -f /etc/traefik/traefik.toml ]]; then
            echo "Updating traefik config"
            traefik_config_temp=$(mktemp)
            cp /etc/traefik/traefik.toml $traefik_config_temp 
            envsubst < $traefik_config_temp > /etc/traefik/traefik.toml 

            traefik_config_temp=$(mktemp)
            cp /etc/traefik/config/config.toml $traefik_config_temp 
            envsubst < $traefik_config_temp > /etc/traefik/config/config.toml 

            chmod 744 /etc/traefik/config/config.toml
            chmod 744 /etc/traefik/traefik.toml

            systemctl start auth_server
            systemctl start traefik
          fi
          echo "###########################################"

          SESSION_TOKEN="$(curl -s -X PUT "http://169.254.169.254/latest/api/token" \
                                       -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")"

          INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $SESSION_TOKEN" \
                               http://169.254.169.254/latest/meta-data/instance-id)
          PRIVATE_IP=$(curl -s -H "X-aws-ec2-metadata-token: $SESSION_TOKEN" \
                                http://169.254.169.254/latest/meta-data/local-ipv4)

          echo "Mounting volume ${DataVolume}" 
          volume_instance_id=$(aws ec2 describe-volumes \
                                --volume-ids ${DataVolume} \
                                --query 'Volumes[0].Attachments[0].InstanceId' \
                                --output text \
                                --region ${AWS::Region})
          
          if [[ "$volume_instance_id" != "None" ]]; then
            echo "Volume ${DataVolume} is attached to instance volume_instance_id. Terminating...."
            aws ec2 terminate-instances \
              --instance-ids $volume_instance_id \
              --region ${AWS::Region}
            echo "Instance $volume_instance_id terminated."
          else
            echo "Volume ${DataVolume} is not attached to any instance."
          fi
          
          aws ec2 wait volume-available --volume-id ${DataVolume} --region ${AWS::Region}

          aws ec2 attach-volume \
            --volume-id ${DataVolume} \
            --region ${AWS::Region} \
            --instance-id $INSTANCE_ID \
            --device /dev/xvdf

          aws ec2 wait volume-in-use \
            --volume-id ${DataVolume} \
            --region ${AWS::Region}

          while [ ! -e /dev/nvme1n1 ]; do 
            echo "Waiting for EBS volume to attach"; 
          sleep 5; done

           if [[ "$(file -sL /dev/nvme1n1 | grep "XFS" | wc -l)" == "0" ]]; then
            echo "Device is not partitioned, running mkfs!";

            if [[ -d ${VolumePath} ]]; then
              echo "Creating copy of data in ${VolumePath}"
              mkdir /tmp/restore 
              cp -p ${VolumePath}/* /tmp/restore -r
            fi

            mkfs.xfs /dev/nvme1n1
          fi

          env
          mkdir -p /var/lib/docker/volumes
          mkdir -p ${VolumePath}
          chown 1035:1035 ${VolumePath}

          mount /dev/nvme1n1 ${VolumePath}
          chmod 777 ${VolumePath}

          if [[ -d /tmp/restore ]]; then
            echo "Restoring data from image"
            mv /tmp/restore/* ${VolumePath}/
            rm -rf /tmp/restore/

            tree -pufid ${VolumePath}
          fi

          systemctl restart docker

          env
          echo "Checking custom statrup script /etc/init-userdata.sh"
          if [[ -f "/etc/init-userdata.sh" ]]; then
            echo "Executing custom script /etc/init-userdata.sh"
            cat /etc/init-userdata.sh
            chmod +x /etc/init-userdata.sh
            /etc/init-userdata.sh
          fi

          aws route53 change-resource-record-sets --hosted-zone-id "${PrivateHostedZoneId}" \
            --change-batch '{"Comment":"Update DNS record for instance",
                               "Changes":[
                                  {
                                     "Action":"UPSERT",
                                     "ResourceRecordSet":{
                                        "Name":"${ServiceAlias}-instance.${PrivateHostedZoneName}",
                                        "Type":"A",
                                        "TTL":30,
                                        "ResourceRecords":[
                                           {
                                              "Value":"'"$PRIVATE_IP"'"
                                           }
                                        ]
                                     }
                                  }
                               ]
                            }'

          
          aws cloudformation signal-resource \
              --stack-name "${AWS::StackName}" \
              --logical-resource-id "ServiceAutoScalingGroup" \
              --unique-id "${!INSTANCE_ID}"  \
              --status "SUCCESS"


